 
  #include <iostream>
using namespace std;

struct Lista
{
	string nome;
	int prontuario;
	double salario;
	struct Lista *prox;
};

Lista* init()
{
	return NULL;
}

int isEmpty(Lista* lista)
{
	return (lista == NULL);
}

Lista* insert(Lista* lista, string nome, int prontuario, double salario)
{
	Lista* novoFuncionario = new Lista;
	novoFuncionario->nome = nome;
	novoFuncionario->prontuario = prontuario;
	novoFuncionario->salario = salario;
	novoFuncionario->prox = lista;
	return novoFuncionario;
}


void print(Lista* lista)
{
	double totalsalario = 0;
	Lista* aux;
	aux = lista;
	while (aux != NULL)
	{
		cout << "Nome: " << aux->nome << endl;
		cout << "Prontuario: " << aux->prontuario << endl;
		cout << "Salario: " << aux->salario << endl << endl;
		totalsalario += aux->salario;

		aux = aux->prox;
	}
	
	cout << "Salario total dos funcionarios: " << aux->salario << endl << endl;
	
}

Lista* find(Lista* lista, int prontuario)
{
	Lista* aux;
	aux = lista;
	while (aux != NULL && aux->prontuario != prontuario)
	{
		aux = aux->prox;
	}
	if (aux == NULL)
	{
		aux = new Lista;
		aux->prontuario = -1;
		aux->prox = NULL;
	}
	return aux;
}

Lista* remove(Lista* lista, int prontuario)
{
	Lista *ant = NULL;
	Lista *aux;
	
	aux = lista;
	while (aux != NULL && aux->prontuario != prontuario)
	{
		ant = aux;
		aux = aux->prox;
	}
	if (aux == NULL)
	{
		return lista;
	}
	if (ant == NULL) // era primeiro
	{
		lista = aux->prox;
	}
	else // estava no meio
	{
		ant->prox = aux->prox;
	}
	free(aux);
	return lista;
}

void freeList(Lista* lista)
{
	Lista *aux;
	aux = lista;
	while (aux != NULL)
	{
		Lista *ant = aux->prox;
		free(aux);
		aux = ant;
	}
}

void ExecutarAcoes(Lista* funcionarioList){
	string nome;
	int prontuario;
	double salario;
	int option;
	
	cout << "Escolha uma opcao: " << endl;
	cout << "0. Sair" << endl;
	cout << "1. Incluir" << endl;
	cout << "2. Excluir" << endl;
	cout << "3. Pesquisar" << endl;
	cout << "4. Listar" << endl;
	cin >> option; 
	
	switch(option)
	{
		case 0: {
			cout << "Saiu!";
		}break;
	
		case 1:{
			cout << "Insira o nome: ";
			cin >> nome;
			cout << "Insira o prontuario: ";
			cin >> prontuario;
			cout << "Insira o salario: ";
			cin >> salario;
			
			funcionarioList = insert(funcionarioList, nome, prontuario, salario);
			print(funcionarioList);
		} break;
	
	
		case 2: {
			cout << "Insira o prontuario do usuario que deseja remover: ";
			cin >> prontuario;
			
			Lista *procurado = find(funcionarioList,prontuario); 
			if (procurado->prontuario > -1)
			{		  
			   int confirm = 0; 
		  	   cout << "Deseja remover este funcionario?" << endl;
	           cout	<< "Nome: " << procurado->nome << " |Prontuario: " << procurado->prontuario << " |Salario: "	<< procurado->salario << endl;
	           cout << "0.Nao | 1. Sim" << endl;				   
			   cin >> confirm;
			   
			   if (confirm == 1){
				   funcionarioList = remove(funcionarioList, prontuario);
				   cout <<"Funcionario removido com sucesso!." << endl;	
			   } else {
   	   	   	   cout <<"Nao removido." << endl;
				}   
			} else {
		   	   cout <<"Funcionario nao encontrado!" << endl;
		    };
		} break;
	
	
		case 3:{
			cout << "Insira o prontuario do funcionario a ser buscado: ";
			cin >> prontuario;
			Lista *procurado = find(funcionarioList,prontuario); 
			if (procurado->prontuario > -1) {
		  	   cout << "Resultado da busca: " <<  endl;	
			   cout << procurado->nome;
			   cout << procurado->prontuario;
			   cout << procurado->salario;
			} else {
		   	   cout <<"Nao encontrado" << endl;
		    };
		    
	   } break;

		case 4: {
			print(funcionarioList); 
		}break;
	}
	
	
	
}

int main(int argc, char** argv)
{
	
	int refazer = 1;
	
	/*
	
	Elabore um programa que permita administrar uma lista de funcionários e, através de um menu, ofereça as seguintes opções:
	   0. Sair
	   1. Incluir
	   2. Excluir
	   3. Pesquisar
	   4. Listar
	
	*/
	
	Lista *funcionarioList;
	funcionarioList = init();
	
	cout << "Lista vazia: " << (isEmpty(funcionarioList)?"Sim":"Nao") << endl;
	
	funcionarioList = insert(funcionarioList, "Leandro", 3005372, 1500.25);
	funcionarioList = insert(funcionarioList, "Carlos", 3007584, 2850.75);
	
	
	// INICIO DAS ESCOLHAS
	
	while (refazer == 1) {
		ExecutarAcoes(funcionarioList);	
		cout << "Deseja realizar outra acao? 0. Não | 1. Sim"  << endl;
		cin >> refazer;
	}
  
  freeList(funcionarioList);  
	return 0;
}
